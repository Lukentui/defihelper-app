{"version":3,"file":"main.e62b5ddf6547440cf521.hot-update.js","sources":["/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/app.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/common/confirm-dialog/confirm-dialog.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/common/confirm-dialog/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/common/cut-account.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/common/history.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/common/hooks/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/common/hooks/use-query-params.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/graphql/_generated-types.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/layouts/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/layouts/main-layout/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/layouts/main-layout/main-layout.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/paths.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/common/constants.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/common/graphql/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/common/graphql/protocol-create.graphql.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/common/graphql/protocol-delete.graphql.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/common/graphql/protocol-detail.graphql.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/common/graphql/protocol-list.graphql.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/common/graphql/protocol-update.graphql.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/common/graphql/protocol.fragment.graphql.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/common/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/common/protocol-form/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/common/protocol-form/protocol-form.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/common/protocol.api.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/protocol-create/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/protocol-create/protocol-create.model.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/protocol-create/protocol-create.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/protocol-detail/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/protocol-detail/protocol-detail.model.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/protocol-detail/protocol-detail.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/protocol-list/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/protocol-list/protocol-list.model.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/protocol-list/protocol-list.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/protocol-update/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/protocol-update/protocol-update.model.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/protocols/protocol-update/protocol-update.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/router/can-route.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/router/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/router/router.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/common/graphql/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/common/graphql/staking-contract-create.graphql.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/common/graphql/staking-contract-delete.graphql.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/common/graphql/staking-contract-list.graphql.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/common/graphql/staking-contract-update.graphql.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/common/graphql/staking-contract.fragment.graphql.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/common/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/common/staking-form/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/common/staking-form/staking-form.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/common/staking.api.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/staking-create/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/staking-create/staking-create.model.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/staking-create/staking-create.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/staking-list/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/staking-list/staking-list.model.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/staking-list/staking-list.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/staking-update/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/staking-update/staking-update.model.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/staking/staking-update/staking-update.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/users/common/graphql/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/users/common/graphql/me.graphql.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/users/common/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/users/common/user.api.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/users/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/users/user.ability.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/users/user.model.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/users/user.provider.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/wallets/wallet-detail/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/wallets/wallet-detail/wallet-detail.tsx","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/wallets/wallet-list/index.ts","/Users/tagirgilazov/Desktop/work.nosync/defihelper-frontend/src/wallets/wallet-list/wallet-list.tsx"],"sourcesContent":["import { useNetwork } from './wallets/networks'\nimport { Router } from './router'\nimport { DialogProvider } from './common/dialog'\nimport { NotificationsProvider } from './notifications'\nimport { UserProvider } from './users'\n\nexport const App: React.VFC = () => {\n  useNetwork()\n\n  return (\n    <DialogProvider>\n      <NotificationsProvider maxItems={6}>\n        <UserProvider>\n          <Router />\n        </UserProvider>\n      </NotificationsProvider>\n    </DialogProvider>\n  )\n}\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\n\nimport { Dialog } from '~/common/dialog'\n\nexport type ConfirmDialogProps = {\n  onConfirm: () => void\n  onCancel: () => void\n}\n\nexport const ConfirmDialog: React.VFC<ConfirmDialogProps> = (props) => {\n  return (\n    <Dialog>\n      <Typography>Are you sure?</Typography>\n      <Button onClick={() => props.onConfirm()}>yes</Button>\n      <Button onClick={() => props.onCancel()}>no</Button>\n    </Dialog>\n  )\n}\n","export * from './confirm-dialog'\n","export const cutAccount = (account?: string | null) => {\n  if (!account) return\n\n  return `${account.substring(0, 6)}...${account.substring(\n    account.length - 4,\n    account.length\n  )}`\n}\n","import { createBrowserHistory } from 'history'\n\nexport const history = createBrowserHistory()\n","export * from './use-query-params'\n","import { useMemo } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nexport const useQueryParams = () => {\n  const location = useLocation()\n\n  return useMemo(() => new URLSearchParams(location.search), [location])\n}\n","/* eslint-disable */\nexport type Maybe<T> = T | null\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K]\n}\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> }\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> }\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string\n  String: string\n  Boolean: boolean\n  Int: number\n  Float: number\n  /** Date and time */\n  DateTimeType: string\n  /** Metric column */\n  MetricColumnType: string\n  /** Identificator */\n  UuidType: string\n}\n\nexport type AuthEthereumInputType = {\n  /** Blockchain network id */\n  network: Scalars['String']\n  /** Wallet address */\n  address: Scalars['String']\n  /** Message */\n  message: Scalars['String']\n  /** Signed message */\n  signature: Scalars['String']\n}\n\nexport type AuthType = {\n  __typename?: 'AuthType'\n  /** Authenticated user account */\n  user: UserType\n  /** Session ID */\n  sid: Scalars['String']\n}\n\nexport enum BlockchainEnum {\n  Ethereum = 'ethereum',\n  Waves = 'waves'\n}\n\nexport type BlockchainFilterInputType = {\n  protocol: BlockchainEnum\n  network?: Maybe<Scalars['String']>\n}\n\nexport type ContractCreateInputType = {\n  /** Blockchain protocol */\n  blockchain: BlockchainEnum\n  /** Blockchain network */\n  network: Scalars['String']\n  /** Address */\n  address: Scalars['String']\n  /** Adapter name */\n  adapter: Scalars['String']\n  /** Name */\n  name: Scalars['String']\n  /** Description */\n  description?: Maybe<Scalars['String']>\n  /** Website URL */\n  link?: Maybe<Scalars['String']>\n  /** Is hidden */\n  hidden?: Maybe<Scalars['Boolean']>\n}\n\nexport type ContractListFilterInputType = {\n  blockchain?: Maybe<BlockchainFilterInputType>\n  hidden?: Maybe<Scalars['Boolean']>\n  search?: Maybe<Scalars['String']>\n}\n\nexport type ContractListPaginationInputType = {\n  /** Limit */\n  limit?: Maybe<Scalars['Int']>\n  /** Offset */\n  offset?: Maybe<Scalars['Int']>\n}\n\nexport type ContractListSortInputType = {\n  column: ContractListSortInputTypeColumnEnum\n  order?: Maybe<SortOrderEnum>\n}\n\nexport enum ContractListSortInputTypeColumnEnum {\n  Id = 'id',\n  Name = 'name',\n  Address = 'address',\n  CreatedAt = 'createdAt'\n}\n\nexport type ContractListType = {\n  __typename?: 'ContractListType'\n  /** Elements */\n  list?: Maybe<Array<ContractType>>\n  pagination: Pagination\n}\n\nexport type ContractMetricChartFilterInputType = {\n  /** Created at equals or greater */\n  dateAfter?: Maybe<Scalars['DateTimeType']>\n  /** Created at less */\n  dateBefore?: Maybe<Scalars['DateTimeType']>\n}\n\nexport type ContractMetricChartPaginationInputType = {\n  /** Limit */\n  limit?: Maybe<Scalars['Int']>\n  /** Offset */\n  offset?: Maybe<Scalars['Int']>\n}\n\nexport type ContractMetricChartSortInputType = {\n  column: ContractMetricChartSortInputTypeColumnEnum\n  order?: Maybe<SortOrderEnum>\n}\n\nexport enum ContractMetricChartSortInputTypeColumnEnum {\n  Date = 'date',\n  Value = 'value'\n}\n\nexport type ContractType = {\n  __typename?: 'ContractType'\n  /** Identificator */\n  id: Scalars['UuidType']\n  protocolId: Scalars['UuidType']\n  /** Adapter name */\n  adapter: Scalars['String']\n  /** Blockchain type */\n  blockchain: BlockchainEnum\n  /** Blockchain network id */\n  network: Scalars['String']\n  /** Address */\n  address: Scalars['String']\n  /** Name */\n  name: Scalars['String']\n  /** Description */\n  description: Scalars['String']\n  /** View URL */\n  link?: Maybe<Scalars['String']>\n  /** Is hidden */\n  hidden: Scalars['Boolean']\n  metricChart: Array<MetricChartType>\n  /** Date of created account */\n  createdAt: Scalars['DateTimeType']\n}\n\nexport type ContractTypeMetricChartArgs = {\n  metric: Scalars['MetricColumnType']\n  group: MetricGroupEnum\n  filter?: Maybe<ContractMetricChartFilterInputType>\n  sort?: Maybe<Array<ContractMetricChartSortInputType>>\n  pagination?: Maybe<ContractMetricChartPaginationInputType>\n}\n\nexport type ContractUpdateInputType = {\n  /** Blockchain protocol */\n  blockchain?: Maybe<BlockchainEnum>\n  /** Blockchain network */\n  network?: Maybe<Scalars['String']>\n  /** Address */\n  address?: Maybe<Scalars['String']>\n  /** Adapter name */\n  adapter?: Maybe<Scalars['String']>\n  /** Name */\n  name?: Maybe<Scalars['String']>\n  /** Description */\n  description?: Maybe<Scalars['String']>\n  /** Website URL */\n  link?: Maybe<Scalars['String']>\n  /** Is hidden */\n  hidden?: Maybe<Scalars['Boolean']>\n}\n\nexport type MetricChartType = {\n  __typename?: 'MetricChartType'\n  date: Scalars['DateTimeType']\n  min: Scalars['String']\n  max: Scalars['String']\n  avg: Scalars['String']\n  sum: Scalars['String']\n  count: Scalars['String']\n}\n\nexport enum MetricGroupEnum {\n  Hour = 'hour',\n  Day = 'day',\n  Week = 'week',\n  Year = 'year'\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation'\n  authEth?: Maybe<AuthType>\n  protocolCreate: ProtocolType\n  protocolUpdate: ProtocolType\n  protocolDelete: Scalars['Boolean']\n  contractCreate: ContractType\n  contractUpdate: ContractType\n  contractDelete: Scalars['Boolean']\n  contractWalletLink: Scalars['Boolean']\n  contractWalletUnlink: Scalars['Boolean']\n  proposalCreate: ProposalType\n  proposalUpdate: ProposalType\n  proposalDelete: Scalars['Boolean']\n  vote: VoteType\n  unvote: Scalars['Boolean']\n}\n\nexport type MutationAuthEthArgs = {\n  input: AuthEthereumInputType\n}\n\nexport type MutationProtocolCreateArgs = {\n  input: ProtocolCreateInputType\n}\n\nexport type MutationProtocolUpdateArgs = {\n  id: Scalars['UuidType']\n  input: ProtocolUpdateInputType\n}\n\nexport type MutationProtocolDeleteArgs = {\n  id: Scalars['UuidType']\n}\n\nexport type MutationContractCreateArgs = {\n  protocol: Scalars['UuidType']\n  input: ContractCreateInputType\n}\n\nexport type MutationContractUpdateArgs = {\n  id: Scalars['UuidType']\n  input: ContractUpdateInputType\n}\n\nexport type MutationContractDeleteArgs = {\n  id: Scalars['UuidType']\n}\n\nexport type MutationContractWalletLinkArgs = {\n  contract: Scalars['UuidType']\n  wallet: Scalars['UuidType']\n}\n\nexport type MutationContractWalletUnlinkArgs = {\n  contract: Scalars['UuidType']\n  wallet: Scalars['UuidType']\n}\n\nexport type MutationProposalCreateArgs = {\n  input: ProposalCreateInputType\n}\n\nexport type MutationProposalUpdateArgs = {\n  id: Scalars['UuidType']\n  input: ProposalUpdateInputType\n}\n\nexport type MutationProposalDeleteArgs = {\n  id: Scalars['UuidType']\n}\n\nexport type MutationVoteArgs = {\n  proposal: Scalars['UuidType']\n}\n\nexport type MutationUnvoteArgs = {\n  proposal: Scalars['UuidType']\n}\n\nexport type Pagination = {\n  __typename?: 'Pagination'\n  /** Count of list elements */\n  count: Scalars['Int']\n}\n\nexport type ProposalCreateInputType = {\n  /** Title */\n  title: Scalars['String']\n  /** Description */\n  description: Scalars['String']\n}\n\nexport type ProposalFilterInputType = {\n  id: Scalars['String']\n}\n\nexport type ProposalListFilterInputType = {\n  author?: Maybe<Scalars['UuidType']>\n  status?: Maybe<ProposalStatusEnum>\n  search?: Maybe<Scalars['String']>\n}\n\nexport type ProposalListPaginationInputType = {\n  /** Limit */\n  limit?: Maybe<Scalars['Int']>\n  /** Offset */\n  offset?: Maybe<Scalars['Int']>\n}\n\nexport type ProposalListQuery = {\n  __typename?: 'ProposalListQuery'\n  /** Elements */\n  list?: Maybe<Array<ProposalType>>\n  pagination: Pagination\n}\n\nexport type ProposalListSortInputType = {\n  column: ProposalListSortInputTypeColumnEnum\n  order?: Maybe<SortOrderEnum>\n}\n\nexport enum ProposalListSortInputTypeColumnEnum {\n  Id = 'id',\n  Title = 'title',\n  CreatedAt = 'createdAt'\n}\n\nexport enum ProposalStatusEnum {\n  /** Proposal is open for vote */\n  Open = 'open',\n  /** Proposal is executed */\n  Executed = 'executed',\n  /** Proposal is defeated */\n  Defeated = 'defeated'\n}\n\nexport type ProposalType = {\n  __typename?: 'ProposalType'\n  /** Identificator */\n  id: Scalars['UuidType']\n  /** Title */\n  title: Scalars['String']\n  /** Description */\n  description: Scalars['String']\n  /** Current status */\n  status: ProposalStatusEnum\n  /** Author */\n  author?: Maybe<UserType>\n  votes: VoteListType\n  /** Date of updated */\n  updatedAt: Scalars['DateTimeType']\n  /** Date of created */\n  createdAt: Scalars['DateTimeType']\n}\n\nexport type ProposalTypeVotesArgs = {\n  filter?: Maybe<VoteListFilterInputType>\n  sort?: Maybe<Array<VoteListSortInputType>>\n  pagination?: Maybe<VoteListPaginationInputType>\n}\n\nexport type ProposalUpdateInputType = {\n  /** Title */\n  title?: Maybe<Scalars['String']>\n  /** Description */\n  description?: Maybe<Scalars['String']>\n  /** Current status */\n  status?: Maybe<ProposalStatusEnum>\n}\n\nexport type ProtocolCreateInputType = {\n  /** Adapter name */\n  adapter: Scalars['String']\n  /** Name */\n  name: Scalars['String']\n  /** Description */\n  description?: Maybe<Scalars['String']>\n  /** Icon image URL */\n  icon?: Maybe<Scalars['String']>\n  /** Website URL */\n  link?: Maybe<Scalars['String']>\n  /** Is hidden */\n  hidden?: Maybe<Scalars['Boolean']>\n}\n\nexport type ProtocolFilterInputType = {\n  id: Scalars['String']\n}\n\nexport type ProtocolListFilterInputType = {\n  blockchain?: Maybe<BlockchainFilterInputType>\n  hidden?: Maybe<Scalars['Boolean']>\n  search?: Maybe<Scalars['String']>\n}\n\nexport type ProtocolListPaginationInputType = {\n  /** Limit */\n  limit?: Maybe<Scalars['Int']>\n  /** Offset */\n  offset?: Maybe<Scalars['Int']>\n}\n\nexport type ProtocolListQuery = {\n  __typename?: 'ProtocolListQuery'\n  /** Elements */\n  list?: Maybe<Array<ProtocolType>>\n  pagination: Pagination\n}\n\nexport type ProtocolListSortInputType = {\n  column: ProtocolListSortInputTypeColumnEnum\n  order?: Maybe<SortOrderEnum>\n}\n\nexport enum ProtocolListSortInputTypeColumnEnum {\n  Id = 'id',\n  Name = 'name',\n  Address = 'address',\n  CreatedAt = 'createdAt'\n}\n\nexport type ProtocolMetricChartFilterInputType = {\n  blockchain?: Maybe<BlockchainFilterInputType>\n  /** Created at equals or greater */\n  dateAfter?: Maybe<Scalars['DateTimeType']>\n  /** Created at less */\n  dateBefore?: Maybe<Scalars['DateTimeType']>\n}\n\nexport type ProtocolMetricChartPaginationInputType = {\n  /** Limit */\n  limit?: Maybe<Scalars['Int']>\n  /** Offset */\n  offset?: Maybe<Scalars['Int']>\n}\n\nexport type ProtocolMetricChartSortInputType = {\n  column: ProtocolMetricChartSortInputTypeColumnEnum\n  order?: Maybe<SortOrderEnum>\n}\n\nexport enum ProtocolMetricChartSortInputTypeColumnEnum {\n  Date = 'date',\n  Value = 'value'\n}\n\nexport type ProtocolType = {\n  __typename?: 'ProtocolType'\n  /** Identificator */\n  id: Scalars['UuidType']\n  /** Adapter name */\n  adapter: Scalars['String']\n  /** Name */\n  name: Scalars['String']\n  /** Description */\n  description: Scalars['String']\n  /** Icon image URL */\n  icon?: Maybe<Scalars['String']>\n  /** Website URL */\n  link?: Maybe<Scalars['String']>\n  /** Is hidden */\n  hidden: Scalars['Boolean']\n  contracts: ContractListType\n  metricChart: Array<MetricChartType>\n  /** Date of created account */\n  createdAt: Scalars['DateTimeType']\n}\n\nexport type ProtocolTypeContractsArgs = {\n  filter?: Maybe<ContractListFilterInputType>\n  sort?: Maybe<Array<ContractListSortInputType>>\n  pagination?: Maybe<ContractListPaginationInputType>\n}\n\nexport type ProtocolTypeMetricChartArgs = {\n  metric: Scalars['MetricColumnType']\n  group: MetricGroupEnum\n  filter?: Maybe<ProtocolMetricChartFilterInputType>\n  sort?: Maybe<Array<ProtocolMetricChartSortInputType>>\n  pagination?: Maybe<ProtocolMetricChartPaginationInputType>\n}\n\nexport type ProtocolUpdateInputType = {\n  /** Adapter name */\n  adapter?: Maybe<Scalars['String']>\n  /** Name */\n  name?: Maybe<Scalars['String']>\n  /** Description */\n  description?: Maybe<Scalars['String']>\n  /** Icon image URL */\n  icon?: Maybe<Scalars['String']>\n  /** Website URL */\n  link?: Maybe<Scalars['String']>\n  /** Is hidden */\n  hidden?: Maybe<Scalars['Boolean']>\n}\n\nexport type Query = {\n  __typename?: 'Query'\n  ping: Scalars['String']\n  me?: Maybe<UserType>\n  protocol?: Maybe<ProtocolType>\n  protocols: ProtocolListQuery\n  proposal?: Maybe<ProposalType>\n  proposals: ProposalListQuery\n}\n\nexport type QueryProtocolArgs = {\n  filter: ProtocolFilterInputType\n}\n\nexport type QueryProtocolsArgs = {\n  filter?: Maybe<ProtocolListFilterInputType>\n  sort?: Maybe<Array<ProtocolListSortInputType>>\n  pagination?: Maybe<ProtocolListPaginationInputType>\n}\n\nexport type QueryProposalArgs = {\n  filter: ProposalFilterInputType\n}\n\nexport type QueryProposalsArgs = {\n  filter?: Maybe<ProposalListFilterInputType>\n  sort?: Maybe<Array<ProposalListSortInputType>>\n  pagination?: Maybe<ProposalListPaginationInputType>\n}\n\nexport enum SortOrderEnum {\n  /** Ascending */\n  Asc = 'asc',\n  /** Descending */\n  Desc = 'desc'\n}\n\nexport type UserMetricChartFilterInputType = {\n  /** Target contracts */\n  contract?: Maybe<Array<Scalars['UuidType']>>\n  /** Target wallets */\n  wallet?: Maybe<Array<Scalars['UuidType']>>\n  blockchain?: Maybe<BlockchainFilterInputType>\n  /** Created at equals or greater */\n  dateAfter?: Maybe<Scalars['DateTimeType']>\n  /** Created at less */\n  dateBefore?: Maybe<Scalars['DateTimeType']>\n}\n\nexport type UserMetricChartPaginationInputType = {\n  /** Limit */\n  limit?: Maybe<Scalars['Int']>\n  /** Offset */\n  offset?: Maybe<Scalars['Int']>\n}\n\nexport type UserMetricChartSortInputType = {\n  column: UserMetricChartSortInputTypeColumnEnum\n  order?: Maybe<SortOrderEnum>\n}\n\nexport enum UserMetricChartSortInputTypeColumnEnum {\n  Date = 'date',\n  Value = 'value'\n}\n\nexport enum UserRoleEnum {\n  /** User */\n  User = 'user',\n  /** Administrator */\n  Admin = 'admin'\n}\n\nexport type UserType = {\n  __typename?: 'UserType'\n  /** Identificator */\n  id: Scalars['UuidType']\n  /** Access role */\n  role: UserRoleEnum\n  wallets: WalletListType\n  metricChart: Array<MetricChartType>\n  /** Date of created account */\n  createdAt: Scalars['DateTimeType']\n}\n\nexport type UserTypeWalletsArgs = {\n  filter?: Maybe<WalletListFilterInputType>\n  sort?: Maybe<Array<WalletListSortInputType>>\n  pagination?: Maybe<WalletListPaginationInputType>\n}\n\nexport type UserTypeMetricChartArgs = {\n  metric: Scalars['MetricColumnType']\n  group: MetricGroupEnum\n  filter?: Maybe<UserMetricChartFilterInputType>\n  sort?: Maybe<Array<UserMetricChartSortInputType>>\n  pagination?: Maybe<UserMetricChartPaginationInputType>\n}\n\nexport type VoteListFilterInputType = {\n  user?: Maybe<Scalars['UuidType']>\n}\n\nexport type VoteListPaginationInputType = {\n  /** Limit */\n  limit?: Maybe<Scalars['Int']>\n  /** Offset */\n  offset?: Maybe<Scalars['Int']>\n}\n\nexport type VoteListSortInputType = {\n  column: VoteListSortInputTypeColumnEnum\n  order?: Maybe<SortOrderEnum>\n}\n\nexport enum VoteListSortInputTypeColumnEnum {\n  Id = 'id',\n  CreatedAt = 'createdAt'\n}\n\nexport type VoteListType = {\n  __typename?: 'VoteListType'\n  /** Elements */\n  list?: Maybe<Array<VoteType>>\n  pagination: Pagination\n}\n\nexport type VoteType = {\n  __typename?: 'VoteType'\n  /** Identificator */\n  id: Scalars['UuidType']\n  /** Voting user */\n  user: UserType\n  /** Date of updated */\n  updatedAt: Scalars['DateTimeType']\n  /** Date of created */\n  createdAt: Scalars['DateTimeType']\n}\n\nexport type WalletContractListFilterInputType = {\n  blockchain?: Maybe<BlockchainFilterInputType>\n  hidden?: Maybe<Scalars['Boolean']>\n  search?: Maybe<Scalars['String']>\n}\n\nexport type WalletContractListPaginationInputType = {\n  /** Limit */\n  limit?: Maybe<Scalars['Int']>\n  /** Offset */\n  offset?: Maybe<Scalars['Int']>\n}\n\nexport type WalletContractListSortInputType = {\n  column: WalletContractListSortInputTypeColumnEnum\n  order?: Maybe<SortOrderEnum>\n}\n\nexport enum WalletContractListSortInputTypeColumnEnum {\n  Id = 'id',\n  Name = 'name',\n  Address = 'address',\n  CreatedAt = 'createdAt'\n}\n\nexport type WalletContractListType = {\n  __typename?: 'WalletContractListType'\n  /** Elements */\n  list?: Maybe<Array<ContractType>>\n  pagination: Pagination\n}\n\nexport type WalletListFilterInputType = {\n  blockchain?: Maybe<BlockchainEnum>\n  network?: Maybe<Scalars['String']>\n  search?: Maybe<Scalars['String']>\n}\n\nexport type WalletListPaginationInputType = {\n  /** Limit */\n  limit?: Maybe<Scalars['Int']>\n  /** Offset */\n  offset?: Maybe<Scalars['Int']>\n}\n\nexport type WalletListSortInputType = {\n  column: WalletListSortInputTypeColumnEnum\n  order?: Maybe<SortOrderEnum>\n}\n\nexport enum WalletListSortInputTypeColumnEnum {\n  Id = 'id',\n  Address = 'address',\n  CreatedAt = 'createdAt'\n}\n\nexport type WalletListType = {\n  __typename?: 'WalletListType'\n  /** Elements */\n  list?: Maybe<Array<WalletType>>\n  pagination: Pagination\n}\n\nexport type WalletMetricChartFilterInputType = {\n  /** Target contracts */\n  contract?: Maybe<Array<Scalars['UuidType']>>\n  /** Created at equals or greater */\n  dateAfter?: Maybe<Scalars['DateTimeType']>\n  /** Created at less */\n  dateBefore?: Maybe<Scalars['DateTimeType']>\n}\n\nexport type WalletMetricChartPaginationInputType = {\n  /** Limit */\n  limit?: Maybe<Scalars['Int']>\n  /** Offset */\n  offset?: Maybe<Scalars['Int']>\n}\n\nexport type WalletMetricChartSortInputType = {\n  column: WalletMetricChartSortInputTypeColumnEnum\n  order?: Maybe<SortOrderEnum>\n}\n\nexport enum WalletMetricChartSortInputTypeColumnEnum {\n  Date = 'date',\n  Value = 'value'\n}\n\nexport type WalletType = {\n  __typename?: 'WalletType'\n  /** Identificator */\n  id: Scalars['UuidType']\n  /** Blockchain type */\n  blockchain: BlockchainEnum\n  /** Blockchain network id */\n  network: Scalars['String']\n  /** Address */\n  address: Scalars['String']\n  /** Public key */\n  publicKey: Scalars['String']\n  contracts: WalletContractListType\n  metricChart: Array<MetricChartType>\n  /** Date of created account */\n  createdAt: Scalars['DateTimeType']\n}\n\nexport type WalletTypeContractsArgs = {\n  filter?: Maybe<WalletContractListFilterInputType>\n  sort?: Maybe<Array<WalletContractListSortInputType>>\n  pagination?: Maybe<WalletContractListPaginationInputType>\n}\n\nexport type WalletTypeMetricChartArgs = {\n  metric: Scalars['MetricColumnType']\n  group: MetricGroupEnum\n  filter?: Maybe<WalletMetricChartFilterInputType>\n  sort?: Maybe<Array<WalletMetricChartSortInputType>>\n  pagination?: Maybe<WalletMetricChartPaginationInputType>\n}\n\nexport type ProtocolCreateMutationVariables = Exact<{\n  input: ProtocolCreateInputType\n}>\n\nexport type ProtocolCreateMutation = { __typename?: 'Mutation' } & {\n  protocolCreate: { __typename?: 'ProtocolType' } & ProtocolFragmentFragment\n}\n\nexport type ProtocolDeleteMutationVariables = Exact<{\n  id: Scalars['UuidType']\n}>\n\nexport type ProtocolDeleteMutation = { __typename?: 'Mutation' } & Pick<\n  Mutation,\n  'protocolDelete'\n>\n\nexport type ProtocolQueryVariables = Exact<{\n  filter: ProtocolFilterInputType\n}>\n\nexport type ProtocolQuery = { __typename?: 'Query' } & {\n  protocol?: Maybe<{ __typename?: 'ProtocolType' } & ProtocolFragmentFragment>\n}\n\nexport type ProtocolsQueryVariables = Exact<{\n  protocolFilter?: Maybe<ProtocolListFilterInputType>\n  protocolSort?: Maybe<\n    Array<ProtocolListSortInputType> | ProtocolListSortInputType\n  >\n  protocolPagination?: Maybe<ProtocolListPaginationInputType>\n}>\n\nexport type ProtocolsQuery = { __typename?: 'Query' } & {\n  protocols: { __typename?: 'ProtocolListQuery' } & {\n    list?: Maybe<\n      Array<{ __typename?: 'ProtocolType' } & ProtocolFragmentFragment>\n    >\n    pagination: { __typename?: 'Pagination' } & Pick<Pagination, 'count'>\n  }\n}\n\nexport type ProtocolMetricChartFragment = {\n  __typename?: 'MetricChartType'\n} & Pick<MetricChartType, 'date' | 'min' | 'max' | 'avg' | 'sum' | 'count'>\n\nexport type ProtocolUpdateMutationVariables = Exact<{\n  id: Scalars['UuidType']\n  input: ProtocolUpdateInputType\n}>\n\nexport type ProtocolUpdateMutation = { __typename?: 'Mutation' } & {\n  protocolUpdate: { __typename?: 'ProtocolType' } & ProtocolFragmentFragment\n}\n\nexport type ProtocolFragmentFragment = { __typename?: 'ProtocolType' } & Pick<\n  ProtocolType,\n  | 'id'\n  | 'adapter'\n  | 'name'\n  | 'description'\n  | 'icon'\n  | 'link'\n  | 'hidden'\n  | 'createdAt'\n>\n\nexport type StakingContractCreateMutationVariables = Exact<{\n  protocol: Scalars['UuidType']\n  input: ContractCreateInputType\n}>\n\nexport type StakingContractCreateMutation = { __typename?: 'Mutation' } & {\n  contractCreate: {\n    __typename?: 'ContractType'\n  } & StakingContractFragmentFragment\n}\n\nexport type StakingContractDeleteMutationVariables = Exact<{\n  id: Scalars['UuidType']\n}>\n\nexport type StakingContractDeleteMutation = { __typename?: 'Mutation' } & Pick<\n  Mutation,\n  'contractDelete'\n>\n\nexport type StakingContractListQueryVariables = Exact<{\n  filter: ProtocolFilterInputType\n  contractFilter?: Maybe<ContractListFilterInputType>\n  contractSort?: Maybe<\n    Array<ContractListSortInputType> | ContractListSortInputType\n  >\n  contractPagination?: Maybe<ContractListPaginationInputType>\n}>\n\nexport type StakingContractListQuery = { __typename?: 'Query' } & {\n  protocol?: Maybe<\n    { __typename?: 'ProtocolType' } & {\n      contracts: { __typename?: 'ContractListType' } & {\n        list?: Maybe<\n          Array<\n            { __typename?: 'ContractType' } & StakingContractFragmentFragment\n          >\n        >\n        pagination: { __typename?: 'Pagination' } & Pick<Pagination, 'count'>\n      }\n    }\n  >\n}\n\nexport type StakingContractUpdateMutationVariables = Exact<{\n  id: Scalars['UuidType']\n  input: ContractUpdateInputType\n}>\n\nexport type StakingContractUpdateMutation = { __typename?: 'Mutation' } & {\n  contractUpdate: {\n    __typename?: 'ContractType'\n  } & StakingContractFragmentFragment\n}\n\nexport type StakingContractFragmentFragment = {\n  __typename?: 'ContractType'\n} & Pick<\n  ContractType,\n  | 'id'\n  | 'blockchain'\n  | 'network'\n  | 'address'\n  | 'name'\n  | 'description'\n  | 'link'\n  | 'hidden'\n  | 'createdAt'\n  | 'adapter'\n  | 'protocolId'\n>\n\nexport type MeQueryVariables = Exact<{\n  filter?: Maybe<WalletListFilterInputType>\n  sort?: Maybe<Array<WalletListSortInputType> | WalletListSortInputType>\n  pagination?: Maybe<WalletListPaginationInputType>\n}>\n\nexport type MeQuery = { __typename?: 'Query' } & {\n  me?: Maybe<\n    { __typename?: 'UserType' } & Pick<\n      UserType,\n      'id' | 'role' | 'createdAt'\n    > & {\n        wallets: { __typename?: 'WalletListType' } & {\n          list?: Maybe<\n            Array<\n              { __typename?: 'WalletType' } & Pick<\n                WalletType,\n                | 'id'\n                | 'blockchain'\n                | 'network'\n                | 'address'\n                | 'publicKey'\n                | 'createdAt'\n              >\n            >\n          >\n          pagination: { __typename?: 'Pagination' } & Pick<Pagination, 'count'>\n        }\n      }\n  >\n}\n\nexport type AuthEthMutationVariables = Exact<{\n  input: AuthEthereumInputType\n  filter?: Maybe<WalletListFilterInputType>\n  sort?: Maybe<Array<WalletListSortInputType> | WalletListSortInputType>\n  pagination?: Maybe<WalletListPaginationInputType>\n}>\n\nexport type AuthEthMutation = { __typename?: 'Mutation' } & {\n  authEth?: Maybe<\n    { __typename?: 'AuthType' } & Pick<AuthType, 'sid'> & {\n        user: { __typename?: 'UserType' } & Pick<\n          UserType,\n          'id' | 'role' | 'createdAt'\n        > & {\n            wallets: { __typename?: 'WalletListType' } & {\n              list?: Maybe<\n                Array<\n                  { __typename?: 'WalletType' } & Pick<\n                    WalletType,\n                    | 'id'\n                    | 'blockchain'\n                    | 'network'\n                    | 'address'\n                    | 'publicKey'\n                    | 'createdAt'\n                  >\n                >\n              >\n              pagination: { __typename?: 'Pagination' } & Pick<\n                Pagination,\n                'count'\n              >\n            }\n          }\n      }\n  >\n}\n","export * from './main-layout'\n","export * from './main-layout'\n","import { makeStyles } from '@material-ui/core/styles'\nimport Drawer from '@material-ui/core/Drawer'\nimport AppBar from '@material-ui/core/AppBar'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport List from '@material-ui/core/List'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\nimport LanguageIcon from '@material-ui/icons/Language'\nimport PowerIcon from '@material-ui/icons/Power'\nimport DashboardIcon from '@material-ui/icons/Dashboard'\nimport BookmarkIcon from '@material-ui/icons/Bookmark'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport { Link, useHistory } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport React, { useMemo, useState } from 'react'\n\nimport { paths } from '~/paths'\nimport { useQueryParams } from '~/common/hooks'\nimport { useDialog } from '~/common/dialog'\nimport { WalletList } from '~/wallets/wallet-list'\nimport { cutAccount } from '~/common/cut-account'\nimport { WalletDetail } from '~/wallets/wallet-detail'\nimport { useNetworkProvider } from '~/wallets/networks'\n\nexport type MainLayoutProps = unknown\n\nconst drawerWidth = 340\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerContainer: {\n    overflow: 'auto'\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  },\n  nested: {\n    paddingLeft: theme.spacing(4)\n  },\n  logo: {\n    color: 'inherit',\n    textDecoration: 'none'\n  },\n  actions: {\n    marginLeft: 'auto'\n  }\n}))\n\nconst NETWORKS = [\n  {\n    title: 'All',\n    query: ''\n  },\n  {\n    title: 'Ethereum',\n    query: 'eth'\n  },\n  {\n    title: 'Binance Smart Chain',\n    query: 'bsc'\n  },\n  {\n    title: 'Waves',\n    query: 'waves'\n  }\n]\n\nconst PROTOCOLS = [\n  {\n    id: '1',\n    title: '1inch'\n  },\n  {\n    id: '2',\n    title: 'Aave'\n  },\n  {\n    id: '3',\n    title: 'Alchemix'\n  }\n]\n\nconst MENU = [\n  {\n    title: 'Overview',\n    icon: DashboardIcon\n  },\n  {\n    title: 'Favorites',\n    icon: BookmarkIcon\n  },\n  {\n    title: 'Settings',\n    icon: SettingsIcon\n  }\n]\n\nexport const MainLayout: React.FC<MainLayoutProps> = (props) => {\n  const { account } = useNetworkProvider()\n\n  const classes = useStyles()\n\n  const [anchorEl, setAnchorEl] = useState<\n    (EventTarget & HTMLButtonElement) | null\n  >(null)\n\n  const history = useHistory()\n\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n\n  const handleChangeNetwork = (search: string) => {\n    history.push({\n      pathname: paths.protocols.list,\n      search: search ? `network=${search}` : undefined\n    })\n  }\n\n  const handleChangeLocation = (path: string) =>\n    history.push(path.toLowerCase())\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const queryParams = useQueryParams()\n\n  const currentNetwork = useMemo(\n    () =>\n      NETWORKS.find(({ query }) => query === queryParams.get('network'))?.title,\n    [queryParams]\n  )\n\n  const [openWalletList, closeWalletList] = useDialog(WalletList)\n  const [openChangeWallet] = useDialog(WalletDetail)\n\n  const handleOpenWalletList = () =>\n    openWalletList({ onClick: closeWalletList }).catch((error: Error) =>\n      console.error(error.message)\n    )\n\n  const handleChangeWallet = () =>\n    openChangeWallet({ onChange: handleOpenWalletList }).catch((error: Error) =>\n      console.error(error.message)\n    )\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Typography\n            className={classes.logo}\n            variant=\"h6\"\n            noWrap\n            component={Link}\n            to={paths.main}\n          >\n            DefiHelper.io\n          </Typography>\n          <div className={classes.actions}>\n            {account ? (\n              <Button color=\"inherit\" onClick={handleChangeWallet}>\n                {cutAccount(account)}\n              </Button>\n            ) : (\n              <Button color=\"inherit\" onClick={handleOpenWalletList}>\n                Connect wallet\n              </Button>\n            )}\n            <Button\n              aria-controls=\"simple-menu\"\n              aria-haspopup=\"true\"\n              onClick={handleClick}\n              color=\"inherit\"\n            >\n              {currentNetwork ?? 'All'}\n            </Button>\n          </div>\n          <Menu\n            anchorEl={anchorEl}\n            open={Boolean(anchorEl)}\n            onClose={handleClose}\n          >\n            {NETWORKS.map((networkItem) => (\n              <MenuItem\n                onClick={() => handleChangeNetwork(networkItem.query)}\n                key={networkItem.title}\n              >\n                {networkItem.title}\n              </MenuItem>\n            ))}\n          </Menu>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <Toolbar />\n        <div className={classes.drawerContainer}>\n          <List>\n            <ListItem>\n              <ListItemIcon>\n                <LanguageIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Connected protocols\" />\n            </ListItem>\n            <List>\n              {PROTOCOLS.map((network) => (\n                <ListItem\n                  button\n                  key={network.title}\n                  className={classes.nested}\n                  onClick={() =>\n                    handleChangeLocation(paths.protocols.detail(network.id))\n                  }\n                >\n                  <ListItemIcon>\n                    <PowerIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={network.title} />\n                </ListItem>\n              ))}\n            </List>\n          </List>\n          <Divider />\n          <List>\n            {MENU.map((menuItem) => (\n              <ListItem\n                button\n                key={menuItem.title}\n                onClick={() => handleChangeLocation(menuItem.title)}\n              >\n                <ListItemIcon>\n                  <menuItem.icon />\n                </ListItemIcon>\n                <ListItemText primary={menuItem.title} />\n              </ListItem>\n            ))}\n          </List>\n        </div>\n      </Drawer>\n      <main className={classes.content}>\n        <Toolbar />\n        <Container maxWidth=\"md\">\n          <Box my={2}>{props.children}</Box>\n        </Container>\n      </main>\n    </div>\n  )\n}\n","export const paths = {\n  main: '/',\n\n  protocols: {\n    list: '/protocols',\n    detail: (id = ':protocolId') => `/protocols/${id}`,\n    create: '/protocols/create',\n    update: (id = ':protocolId') => `/protocols/update/${id}`\n  },\n\n  staking: {\n    create: (protocolId = ':protocolId') =>\n      `/protocols/${protocolId}/staking/create`,\n    update: (protocolId = ':protocolId', stakingId = ':stakingId') =>\n      `/protocols/${protocolId}/staking/${stakingId}`\n  }\n}\n","export const PROTOCOLS = [\n  {\n    id: '1',\n    logo: '',\n    title: '1inch',\n    description: `Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quis blanditiis doloremque asperiores facere voluptas nemo iste adipisci architecto? Fuga ipsum cum velit esse? Id harum obcaecati necessitatibus amet sint inventore!`,\n    reward: {\n      tokens: ['1INCH']\n    },\n    network: 'eth',\n    link: 'https://1inch.exchange/#/dao/farming'\n  },\n  {\n    id: '2',\n    logo: '',\n    title: 'Aave',\n    description: `Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quis blanditiis doloremque asperiores facere voluptas nemo iste adipisci architecto? Fuga ipsum cum velit esse? Id harum obcaecati necessitatibus amet sint inventore!`,\n    reward: {\n      tokens: ['stkAAVE']\n    },\n    network: 'eth',\n    link: 'https://aave.com'\n  },\n  {\n    id: '3',\n    logo: '',\n    title: 'Alchemix',\n    description: `Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quis blanditiis doloremque asperiores facere voluptas nemo iste adipisci architecto? Fuga ipsum cum velit esse? Id harum obcaecati necessitatibus amet sint inventore!`,\n    reward: {\n      tokens: ['ALCX']\n    },\n    network: 'eth',\n    link: 'https://app.alchemix.fi/farms'\n  },\n  {\n    id: '4',\n    logo: '',\n    title: 'Basis',\n    description: `Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quis blanditiis doloremque asperiores facere voluptas nemo iste adipisci architecto? Fuga ipsum cum velit esse? Id harum obcaecati necessitatibus amet sint inventore!`,\n    reward: {\n      tokens: ['BAS', 'BAC']\n    },\n    network: 'eth',\n    link: 'https://basis.cash'\n  },\n  {\n    id: '5',\n    logo: '',\n    title: 'Basket DAO',\n    description: `Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quis blanditiis doloremque asperiores facere voluptas nemo iste adipisci architecto? Fuga ipsum cum velit esse? Id harum obcaecati necessitatibus amet sint inventore!`,\n    reward: {\n      tokens: ['BASK']\n    },\n    network: 'waves',\n    link: 'https://basketdao.org'\n  },\n  {\n    id: '6',\n    logo: '',\n    title: 'Benchmark',\n    description: `Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quis blanditiis doloremque asperiores facere voluptas nemo iste adipisci architecto? Fuga ipsum cum velit esse? Id harum obcaecati necessitatibus amet sint inventore!`,\n    reward: {\n      tokens: ['MARK']\n    },\n    network: 'waves',\n    link: 'https://launchpad.benchmarkprotocol.finance/pools'\n  },\n  {\n    id: '7',\n    logo: '',\n    title: 'Big Data Protocol',\n    description: `Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quis blanditiis doloremque asperiores facere voluptas nemo iste adipisci architecto? Fuga ipsum cum velit esse? Id harum obcaecati necessitatibus amet sint inventore!`,\n    reward: {\n      tokens: ['BDP', 'bALPHA']\n    },\n    network: 'bsc',\n    link: 'https://www.bigdataprotocol.com/datavault'\n  },\n  {\n    id: '8',\n    logo: '',\n    title: 'Cover Protocol',\n    description: `Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quis blanditiis doloremque asperiores facere voluptas nemo iste adipisci architecto? Fuga ipsum cum velit esse? Id harum obcaecati necessitatibus amet sint inventore!`,\n    reward: {\n      tokens: ['Various']\n    },\n    network: 'bsc',\n    link: 'https://app.coverprotocol.com'\n  },\n  {\n    id: '9',\n    logo: '',\n    title: 'Cryptex',\n    description: `Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quis blanditiis doloremque asperiores facere voluptas nemo iste adipisci architecto? Fuga ipsum cum velit esse? Id harum obcaecati necessitatibus amet sint inventore!`,\n    reward: {\n      tokens: ['CTX']\n    },\n    network: 'bsc',\n    link: 'https://app.cryptex.finance'\n  }\n]\n\nexport const PROTOCOLS_MAP = PROTOCOLS.reduce<\n  Record<string, typeof PROTOCOLS[number]>\n>((acc, protocol) => {\n  acc[protocol.id] = protocol\n\n  return acc\n}, {})\n\nexport const NETWORKS: Record<string, string> = {\n  bsc: 'BSC',\n  waves: 'Waves',\n  eth: 'Ethereum'\n}\n","export * from './protocol-list.graphql'\nexport * from './protocol-create.graphql'\nexport * from './protocol-detail.graphql'\nexport * from './protocol-delete.graphql'\n","import { gql } from '@urql/core'\n\nimport { PROTOCOL_FRAGMENT } from './protocol.fragment.graphql'\n\nexport const PROTOCOL_CREATE = gql`\n  mutation ProtocolCreate($input: ProtocolCreateInputType!) {\n    protocolCreate(input: $input) {\n      ...protocolFragment\n    }\n  }\n  ${PROTOCOL_FRAGMENT}\n`\n","import { gql } from '@urql/core'\n\nexport const PROTOCOL_DELETE = gql`\n  mutation ProtocolDelete($id: UuidType!) {\n    protocolDelete(id: $id)\n  }\n`\n","import { gql } from '@urql/core'\n\nimport { PROTOCOL_FRAGMENT } from './protocol.fragment.graphql'\n\nexport const PROTOCOL_DETAIL = gql`\n  query Protocol($filter: ProtocolFilterInputType!) {\n    protocol(filter: $filter) {\n      ...protocolFragment\n    }\n  }\n  ${PROTOCOL_FRAGMENT}\n`\n","import { gql } from '@urql/core'\n\nimport { PROTOCOL_FRAGMENT } from './protocol.fragment.graphql'\n\nexport const PROTOCOLS = gql`\n  query Protocols(\n    $protocolFilter: ProtocolListFilterInputType\n    $protocolSort: [ProtocolListSortInputType!]\n    $protocolPagination: ProtocolListPaginationInputType\n  ) {\n    protocols(\n      filter: $protocolFilter\n      sort: $protocolSort\n      pagination: $protocolPagination\n    ) {\n      list {\n        ...protocolFragment\n      }\n      pagination {\n        count\n      }\n    }\n  }\n  ${PROTOCOL_FRAGMENT}\n`\n","import { gql } from '@urql/core'\n\nimport { PROTOCOL_FRAGMENT } from './protocol.fragment.graphql'\n\nexport const PROTOCOL_UPDATE = gql`\n  mutation ProtocolUpdate($id: UuidType!, $input: ProtocolUpdateInputType!) {\n    protocolUpdate(id: $id, input: $input) {\n      ...protocolFragment\n    }\n  }\n  ${PROTOCOL_FRAGMENT}\n`\n","import { gql } from '@urql/core'\n\nexport const PROTOCOL_FRAGMENT = gql`\n  fragment protocolFragment on ProtocolType {\n    id\n    adapter\n    name\n    description\n    icon\n    link\n    hidden\n    createdAt\n  }\n`\n","export * from './protocol-form'\nexport * from './constants'\nexport * from './protocol.api'\n","export * from './protocol-form'\n","import React, { useEffect } from 'react'\nimport { useForm } from 'react-hook-form'\nimport TextField from '@material-ui/core/TextField'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Button from '@material-ui/core/Button'\nimport { FormLabel, makeStyles } from '@material-ui/core'\n\ntype FormValues = {\n  name: string\n  description?: string\n  icon?: string\n  link?: string\n  hidden?: boolean\n  adapter: string\n}\n\nexport type ProtocolFormProps = {\n  loading: boolean\n  onSubmit: (formValues: FormValues) => void\n  defaultValues?: FormValues\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n\n    '& > *': {\n      margin: theme.spacing(2)\n    }\n  }\n}))\n\nexport const ProtocolForm: React.VFC<ProtocolFormProps> = (props) => {\n  const { register, handleSubmit, setValue, reset } = useForm<FormValues>()\n\n  const classes = useStyles()\n\n  useEffect(() => {\n    reset(props.defaultValues)\n  }, [reset, props.defaultValues])\n\n  const hidden = register('hidden')\n\n  return (\n    <form\n      className={classes.root}\n      onSubmit={handleSubmit(props.onSubmit)}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <TextField\n        type=\"text\"\n        label=\"Name\"\n        inputProps={register('name')}\n        disabled={props.loading}\n      />\n      <TextField\n        type=\"text\"\n        label=\"Description\"\n        inputProps={register('description')}\n        disabled={props.loading}\n      />\n      <TextField\n        type=\"text\"\n        label=\"Icon\"\n        inputProps={register('icon')}\n        disabled={props.loading}\n      />\n      <TextField\n        type=\"text\"\n        label=\"Adapter\"\n        inputProps={register('adapter')}\n        disabled={props.loading}\n      />\n      <TextField\n        type=\"text\"\n        label=\"Link\"\n        inputProps={register('link')}\n        disabled={props.loading}\n      />\n      <FormLabel>\n        Hidden\n        <Checkbox\n          inputRef={hidden.ref}\n          defaultChecked={props.defaultValues?.hidden}\n          onChange={(_, checked) => setValue('hidden', checked)}\n          disabled={props.loading}\n        />\n      </FormLabel>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n        disabled={props.loading}\n      >\n        Submit\n      </Button>\n    </form>\n  )\n}\n","import { getAPIClient } from '~/api'\nimport {\n  ProtocolCreateMutation,\n  ProtocolCreateMutationVariables,\n  ProtocolDeleteMutation,\n  ProtocolDeleteMutationVariables,\n  ProtocolQuery,\n  ProtocolQueryVariables,\n  ProtocolsQuery,\n  ProtocolsQueryVariables,\n  ProtocolUpdateMutation,\n  ProtocolUpdateMutationVariables\n} from '~/graphql/_generated-types'\nimport {\n  PROTOCOLS,\n  PROTOCOL_CREATE,\n  PROTOCOL_DELETE,\n  PROTOCOL_DETAIL\n} from './graphql'\nimport { PROTOCOL_UPDATE } from './graphql/protocol-update.graphql'\n\nexport const protocolsApi = {\n  protocolList: (variables: ProtocolsQueryVariables) =>\n    getAPIClient()\n      .query<ProtocolsQuery, ProtocolsQueryVariables>(PROTOCOLS, variables)\n      .toPromise()\n      .then(({ data }) => data?.protocols),\n\n  protocolDetail: (variables: ProtocolQueryVariables) =>\n    getAPIClient()\n      .query<ProtocolQuery, ProtocolQueryVariables>(PROTOCOL_DETAIL, variables)\n      .toPromise()\n      .then(({ data }) => data?.protocol),\n\n  protocolCreate: (variables: ProtocolCreateMutationVariables) =>\n    getAPIClient()\n      .mutation<ProtocolCreateMutation, ProtocolCreateMutationVariables>(\n        PROTOCOL_CREATE,\n        variables\n      )\n      .toPromise()\n      .then(({ data }) => data?.protocolCreate),\n\n  protocolUpdate: (variables: ProtocolUpdateMutationVariables) =>\n    getAPIClient()\n      .mutation<ProtocolUpdateMutation, ProtocolUpdateMutationVariables>(\n        PROTOCOL_UPDATE,\n        variables\n      )\n      .toPromise()\n      .then(({ data }) => data?.protocolUpdate),\n\n  protocolDelete: (id: string) =>\n    getAPIClient()\n      .mutation<ProtocolDeleteMutation, ProtocolDeleteMutationVariables>(\n        PROTOCOL_DELETE,\n        { id }\n      )\n      .toPromise()\n      .then(({ data }) => data?.protocolDelete)\n}\n","export * from './protocol-create'\n","import { createDomain } from 'effector-logger'\nimport { history } from '~/common/history'\n\nimport { ProtocolCreateMutationVariables } from '~/graphql/_generated-types'\nimport { notifications } from '~/notifications'\nimport { paths } from '~/paths'\nimport { protocolsApi } from '../common/protocol.api'\n\nconst protocolCreate = createDomain('protocolCreate')\n\nexport const protocolCreateFx = protocolCreate.createEffect({\n  name: 'protocolCreateFx',\n  handler: (input: ProtocolCreateMutationVariables['input']) =>\n    protocolsApi.protocolCreate({\n      input\n    })\n})\n\nprotocolCreateFx.failData.watch((error) => notifications.error(error.message))\n\nprotocolCreateFx.doneData.watch((payload) => {\n  if (!payload?.id) return\n\n  history.push(paths.protocols.detail(payload.id))\n})\n","import { useStore } from 'effector-react'\n\nimport { MainLayout } from '~/layouts'\nimport { ProtocolForm } from '~/protocols/common'\nimport * as model from './protocol-create.model'\n\nexport type ProtocolCreateProps = unknown\n\nexport const ProtocolCreate: React.VFC<ProtocolCreateProps> = () => {\n  const loading = useStore(model.protocolCreateFx.pending)\n\n  return (\n    <MainLayout>\n      <ProtocolForm onSubmit={model.protocolCreateFx} loading={loading} />\n    </MainLayout>\n  )\n}\n","export * from './protocol-detail'\nexport * as detailModel from './protocol-detail.model'\n","import { createDomain, sample } from 'effector-logger'\nimport { createGate } from 'effector-react'\n\nimport { ProtocolQuery } from '~/graphql/_generated-types'\nimport { protocolsApi } from '../common'\n\nexport const protocolDetailDomain = createDomain('protocolList')\n\nexport const fetchProtocolFx = protocolDetailDomain.createEffect({\n  name: 'fetchProtocolList',\n  handler: async (params: { protocolId: string }) =>\n    protocolsApi.protocolDetail({\n      filter: {\n        id: params.protocolId\n      }\n    })\n})\n\nexport const $protocol = protocolDetailDomain\n  .createStore<ProtocolQuery['protocol'] | null>(null, {\n    name: 'protocol'\n  })\n  .on(fetchProtocolFx.doneData, (_, payload) => payload)\n\nexport const Gate = createGate<{ protocolId: string }>({\n  domain: protocolDetailDomain\n})\n\nsample({\n  clock: Gate.open,\n  target: fetchProtocolFx\n})\n","import { Link, Typography } from '@material-ui/core'\nimport React from 'react'\nimport { useParams } from 'react-router-dom'\nimport LaunchIcon from '@material-ui/icons/Launch'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useGate, useStore } from 'effector-react'\n\nimport { MainLayout } from '~/layouts'\nimport { StakingList } from '~/staking/staking-list'\nimport * as model from './protocol-detail.model'\n\nexport type ProtocolDetailProps = unknown\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  },\n\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n\n  icon: {\n    verticalAlign: 'middle'\n  }\n}))\n\nexport const ProtocolDetail: React.VFC<ProtocolDetailProps> = () => {\n  const params = useParams<{ protocolId: string }>()\n\n  useGate(model.Gate, params)\n\n  const protocol = useStore(model.$protocol)\n  const loading = useStore(model.fetchProtocolFx.pending)\n\n  const classes = useStyles()\n\n  return (\n    <MainLayout>\n      {loading && !protocol && 'loading...'}\n      {!loading && protocol && (\n        <div>\n          <div className={classes.header}>\n            <Typography variant=\"h2\">{protocol.name}</Typography>\n            {protocol.link && (\n              <Typography>\n                <Link target=\"_blank\" href={protocol.link}>\n                  More info <LaunchIcon className={classes.icon} />\n                </Link>\n              </Typography>\n            )}\n          </div>\n          <Typography gutterBottom>{protocol.description}</Typography>\n          <Typography gutterBottom component=\"div\">\n            <div>Adapter: {protocol.adapter}</div>\n            <div>Icon: {protocol.icon}</div>\n          </Typography>\n        </div>\n      )}\n      <Typography gutterBottom>Staking contracts</Typography>\n      <StakingList protocolId={params.protocolId} />\n    </MainLayout>\n  )\n}\n","export * from './protocol-list'\n","import { createDomain, sample } from 'effector-logger'\nimport { createGate } from 'effector-react'\n\nimport { ProtocolsQuery } from '~/graphql/_generated-types'\nimport {\n  $wallet,\n  activateWalletFx,\n  updateWalletFx\n} from '~/wallets/networks/network.model'\nimport { protocolsApi } from '../common'\n\nexport const protocolListDomain = createDomain('protocolList')\n\nexport const fetchProtocolListFx = protocolListDomain.createEffect({\n  name: 'fetchProtocolList',\n  handler: async () => protocolsApi.protocolList({})\n})\n\nconst ERROR = 'Not deleted'\n\nexport const deleteProtocolFx = protocolListDomain.createEffect({\n  name: 'deleteProtocol',\n  handler: async (id: string) => {\n    const isDeleted = await protocolsApi.protocolDelete(id)\n\n    if (isDeleted) {\n      return id\n    }\n\n    throw new Error(ERROR)\n  }\n})\n\nexport const $protocolList = protocolListDomain\n  .createStore<ProtocolsQuery['protocols']>(\n    {\n      list: [],\n      pagination: {\n        count: 0\n      }\n    },\n    {\n      name: 'protocols'\n    }\n  )\n  .on(fetchProtocolListFx.doneData, (_, payload) => payload)\n  .on(deleteProtocolFx.doneData, (state, payload) => {\n    const list = state.list?.filter(({ id }) => id !== payload)\n\n    return {\n      ...state,\n      list\n    }\n  })\n\nexport const Gate = createGate({\n  domain: protocolListDomain\n})\n\nsample({\n  source: $wallet,\n  clock: [Gate.open, activateWalletFx.doneData, updateWalletFx.doneData],\n  target: fetchProtocolListFx\n})\n","import { makeStyles, Paper } from '@material-ui/core'\nimport { Link as ReactRouterLink } from 'react-router-dom'\nimport { useGate, useStore } from 'effector-react'\nimport Button from '@material-ui/core/Button'\nimport { useMemo } from 'react'\n\nimport { MainLayout } from '~/layouts'\nimport { paths } from '~/paths'\nimport { Can, useAbility } from '~/users'\nimport { useDialog } from '~/common/dialog'\nimport { ConfirmDialog } from '~/common/confirm-dialog'\nimport * as model from './protocol-list.model'\n\nexport type ProtocolListProps = unknown\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  },\n\n  link: {\n    textDecoration: 'none',\n    width: '100%'\n  },\n\n  item: {\n    display: 'flex',\n    marginBottom: 5,\n    width: '100%'\n  },\n\n  edit: {},\n\n  card: {\n    padding: '10px 15px',\n    display: 'flex',\n    alignItems: 'center'\n  },\n\n  tokens: {\n    marginLeft: 'auto'\n  },\n\n  mr: {\n    marginRight: 20\n  }\n}))\n\nexport const ProtocolList: React.VFC<ProtocolListProps> = () => {\n  const classes = useStyles()\n\n  const ability = useAbility()\n\n  const [openConfirm] = useDialog(ConfirmDialog)\n\n  const loading = useStore(model.fetchProtocolListFx.pending)\n  const protocolList = useStore(model.$protocolList)\n\n  const deleteLoading = useStore(model.deleteProtocolFx.pending)\n\n  useGate(model.Gate)\n\n  const handleOpenConfirm = async (id: string) => {\n    try {\n      await openConfirm()\n\n      await model.deleteProtocolFx(id)\n    } catch (error) {\n      console.error(error.message)\n    }\n  }\n\n  const protocols = useMemo(\n    () =>\n      protocolList.list?.filter((protocol) => ability.can('read', protocol)),\n    [protocolList, ability]\n  )\n\n  return (\n    <MainLayout>\n      <Can I=\"create\" an=\"Protocol\">\n        <Button\n          component={ReactRouterLink}\n          variant=\"contained\"\n          color=\"primary\"\n          to={paths.protocols.create}\n        >\n          New protocol\n        </Button>\n      </Can>\n      <ul className={classes.root}>\n        {loading && (\n          <li>\n            <Paper className={classes.card}>loading...</Paper>\n          </li>\n        )}\n        {!loading && !protocols?.length && (\n          <li>\n            <Paper className={classes.card}>no protocols found</Paper>\n          </li>\n        )}\n        {!loading &&\n          protocols &&\n          protocols.map((protocol) => (\n            <li key={protocol.id} className={classes.item}>\n              <ReactRouterLink\n                to={paths.protocols.detail(protocol.id)}\n                className={classes.link}\n              >\n                <Paper className={classes.card}>\n                  <div className={classes.mr}>{protocol.name}</div>\n                  <div className={`${classes.mr} ${classes.tokens}`}>\n                    {protocol.createdAt}\n                  </div>\n                </Paper>\n              </ReactRouterLink>\n              <Can I=\"update\" a=\"Protocol\">\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  component={ReactRouterLink}\n                  to={paths.protocols.update(protocol.id)}\n                  className={classes.edit}\n                  disabled={deleteLoading}\n                >\n                  Edit\n                </Button>\n              </Can>\n              <Can I=\"delete\" a=\"Protocol\">\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  disabled={deleteLoading}\n                  onClick={() => handleOpenConfirm(protocol.id)}\n                >\n                  Delete\n                </Button>\n              </Can>\n            </li>\n          ))}\n      </ul>\n    </MainLayout>\n  )\n}\n","export * from './protocol-update'\n","import { createDomain } from 'effector-logger'\nimport { history } from '~/common/history'\n\nimport { ProtocolUpdateMutationVariables } from '~/graphql/_generated-types'\nimport { notifications } from '~/notifications'\nimport { paths } from '~/paths'\nimport { protocolsApi } from '../common/protocol.api'\n\nconst protocolUpdate = createDomain('protocolUpdate')\n\nexport const protocolUpdateFx = protocolUpdate.createEffect({\n  name: 'protocolUpdateFx',\n  handler: (variables: ProtocolUpdateMutationVariables) =>\n    protocolsApi.protocolUpdate(variables)\n})\n\nprotocolUpdateFx.failData.watch((error) => notifications.error(error.message))\n\nprotocolUpdateFx.doneData.watch((payload) => {\n  if (!payload?.id) return\n\n  history.push(paths.protocols.detail(payload.id))\n})\n","import { useGate, useStore } from 'effector-react'\nimport { useMemo } from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport { MainLayout } from '~/layouts'\nimport { ProtocolForm } from '~/protocols/common'\nimport { detailModel } from '~/protocols/protocol-detail'\nimport * as model from './protocol-update.model'\n\nexport type ProtocolUpdateProps = unknown\n\nexport const ProtocolUpdate: React.VFC<ProtocolUpdateProps> = () => {\n  const params = useParams<{ protocolId: string }>()\n\n  useGate(detailModel.Gate, params)\n\n  const protocol = useStore(detailModel.$protocol)\n  const loading = useStore(detailModel.fetchProtocolFx.pending)\n\n  const defaultValues = useMemo(\n    () => ({\n      name: protocol?.name ?? '',\n      description: protocol?.description ?? undefined,\n      hidden: protocol?.hidden ?? undefined,\n      icon: protocol?.icon ?? undefined,\n      link: protocol?.link ?? undefined,\n      adapter: protocol?.adapter ?? ''\n    }),\n    [protocol]\n  )\n\n  const formLoading = useStore(model.protocolUpdateFx.pending)\n\n  return (\n    <MainLayout>\n      {!loading && (\n        <ProtocolForm\n          onSubmit={(formValues) =>\n            model.protocolUpdateFx({ id: params.protocolId, input: formValues })\n          }\n          loading={formLoading}\n          defaultValues={defaultValues}\n        />\n      )}\n    </MainLayout>\n  )\n}\n","import { Route, RouteProps, Redirect } from 'react-router-dom'\nimport { useStore } from 'effector-react'\n\nimport * as model from '~/users/user.model'\nimport { paths } from '~/paths'\nimport { useAbility } from '~/users'\nimport { Actions, Subjects } from '~/users/user.ability'\n\ntype CanRouteProps = RouteProps & {\n  action: Actions\n  subject: Subjects\n}\n\nexport const CanRoute: React.FC<CanRouteProps> = (props) => {\n  const user = useStore(model.$user)\n\n  const loading = useStore(model.fetchUserFx.pending)\n\n  const ability = useAbility()\n\n  const { children, action, subject, ...restOfProps } = props\n\n  if (loading && !user) {\n    return <Route {...restOfProps}>loading...</Route>\n  }\n\n  return !loading && user && ability.can(action, subject) ? (\n    <Route {...restOfProps}>{children}</Route>\n  ) : (\n    <Redirect to={paths.main} />\n  )\n}\n","export * from './router'\n","import React from 'react'\nimport {\n  Route,\n  Router as BrowserRouter,\n  Switch,\n  Redirect\n} from 'react-router-dom'\n\n// import { PrivateRoute } from './private-route'\nimport { CanRoute } from './can-route'\nimport { paths } from '~/paths'\nimport { history } from '~/common/history'\nimport { ProtocolList } from '~/protocols/protocol-list'\nimport { ProtocolDetail } from '~/protocols/protocol-detail'\nimport { ProtocolCreate } from '~/protocols/protocol-create'\nimport { ProtocolUpdate } from '~/protocols/protocol-update'\nimport { StakingCreate } from '~/staking/staking-create'\nimport { StakingUpdate } from '~/staking/staking-update'\n\nexport type RouterProps = unknown\n\nexport const Router: React.VFC<RouterProps> = () => {\n  return (\n    <BrowserRouter history={history}>\n      <Switch>\n        <Redirect from={paths.main} to={paths.protocols.list} exact />\n        <CanRoute\n          action=\"create\"\n          subject=\"Protocol\"\n          path={paths.protocols.create}\n        >\n          <ProtocolCreate />\n        </CanRoute>\n        <CanRoute\n          action=\"update\"\n          subject=\"Protocol\"\n          path={paths.protocols.update()}\n        >\n          <ProtocolUpdate />\n        </CanRoute>\n        <CanRoute\n          action=\"create\"\n          subject=\"Contract\"\n          path={paths.staking.create()}\n        >\n          <StakingCreate />\n        </CanRoute>\n        <CanRoute\n          action=\"update\"\n          subject=\"Contract\"\n          path={paths.staking.update()}\n        >\n          <StakingUpdate />\n        </CanRoute>\n        <Route path={paths.protocols.detail()}>\n          <ProtocolDetail />\n        </Route>\n        <Route path={paths.protocols.list}>\n          <ProtocolList />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n","export * from './staking-contract-list.graphql'\nexport * from './staking-contract-delete.graphql'\nexport * from './staking-contract-create.graphql'\nexport * from './staking-contract-update.graphql'\n","import { gql } from '@urql/core'\n\nimport { STAKING_CONTRACT_FRAGMENT } from './staking-contract.fragment.graphql'\n\nexport const STAKING_CONTRACT_CREATE = gql`\n  mutation StakingContractCreate(\n    $protocol: UuidType!\n    $input: ContractCreateInputType!\n  ) {\n    contractCreate(protocol: $protocol, input: $input) {\n      ...stakingContractFragment\n    }\n  }\n  ${STAKING_CONTRACT_FRAGMENT}\n`\n","import { gql } from '@urql/core'\n\nexport const STAKING_CONTRACT_DELETE = gql`\n  mutation StakingContractDelete($id: UuidType!) {\n    contractDelete(id: $id)\n  }\n`\n","import { gql } from '@urql/core'\n\nimport { STAKING_CONTRACT_FRAGMENT } from './staking-contract.fragment.graphql'\n\nexport const STAKING_CONTRACT_LIST = gql`\n  query StakingContractList(\n    $filter: ProtocolFilterInputType!\n    $contractFilter: ContractListFilterInputType\n    $contractSort: [ContractListSortInputType!]\n    $contractPagination: ContractListPaginationInputType\n  ) {\n    protocol(filter: $filter) {\n      contracts(\n        filter: $contractFilter\n        sort: $contractSort\n        pagination: $contractPagination\n      ) {\n        list {\n          ...stakingContractFragment\n        }\n        pagination {\n          count\n        }\n      }\n    }\n  }\n  ${STAKING_CONTRACT_FRAGMENT}\n`\n","import { gql } from '@urql/core'\n\nimport { STAKING_CONTRACT_FRAGMENT } from './staking-contract.fragment.graphql'\n\nexport const STAKING_CONTRACT_UPDATE = gql`\n  mutation StakingContractUpdate(\n    $id: UuidType!\n    $input: ContractUpdateInputType!\n  ) {\n    contractUpdate(id: $id, input: $input) {\n      ...stakingContractFragment\n    }\n  }\n  ${STAKING_CONTRACT_FRAGMENT}\n`\n","import { gql } from '@urql/core'\n\nexport const STAKING_CONTRACT_FRAGMENT = gql`\n  fragment stakingContractFragment on ContractType {\n    id\n    blockchain\n    network\n    address\n    name\n    description\n    link\n    hidden\n    createdAt\n    adapter\n    protocolId\n  }\n`\n","export * from './staking.api'\nexport * from './graphql'\nexport * from './staking-form'\n","export * from './staking-form'\n","import TextField from '@material-ui/core/TextField'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Button from '@material-ui/core/Button'\nimport { FormLabel, makeStyles } from '@material-ui/core'\nimport { useForm } from 'react-hook-form'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { useEffect } from 'react'\n\nimport { BlockchainEnum } from '~/graphql/_generated-types'\n\ntype FormValues = {\n  blockchain: BlockchainEnum\n  network: string\n  address: string\n  adapter: string\n  name: string\n  description?: string | null\n  link?: string | null\n  hidden?: boolean | null\n}\n\nexport type StakingFormProps = {\n  loading: boolean\n  onSubmit: (formValues: FormValues) => void\n  defaultValues?: FormValues\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n\n    '& > *': {\n      margin: theme.spacing(2)\n    }\n  }\n}))\n\nexport const StakingForm: React.FC<StakingFormProps> = (props) => {\n  const classes = useStyles()\n\n  const { register, setValue, handleSubmit, reset } = useForm<FormValues>()\n\n  const hidden = register('hidden')\n\n  const blockChain = register('blockchain')\n\n  useEffect(() => {\n    if (!props.defaultValues) return\n\n    reset(props.defaultValues)\n  }, [props.defaultValues, reset])\n\n  return (\n    <form\n      noValidate\n      autoComplete=\"off\"\n      className={classes.root}\n      onSubmit={handleSubmit(props.onSubmit)}\n    >\n      <TextField\n        type=\"text\"\n        label=\"Name\"\n        defaultValue={props.defaultValues?.name}\n        {...register('name')}\n        disabled={props.loading}\n      />\n      <TextField\n        type=\"text\"\n        label=\"Description\"\n        defaultValue={props.defaultValues?.description}\n        {...register('description')}\n        disabled={props.loading}\n      />\n      <TextField\n        type=\"text\"\n        label=\"Adapter\"\n        defaultValue={props.defaultValues?.adapter}\n        {...register('adapter')}\n        disabled={props.loading}\n      />\n      <TextField\n        type=\"text\"\n        label=\"Address\"\n        defaultValue={props.defaultValues?.address}\n        {...register('address')}\n        disabled={props.loading}\n      />\n      <TextField\n        type=\"text\"\n        label=\"Network\"\n        defaultValue={props.defaultValues?.network}\n        {...register('network')}\n        disabled={props.loading}\n      />\n      <TextField\n        type=\"text\"\n        label=\"Blockchain\"\n        defaultValue={\n          props.defaultValues?.blockchain ?? BlockchainEnum.Ethereum\n        }\n        select\n        disabled={props.loading}\n        inputRef={blockChain.ref}\n        {...blockChain}\n      >\n        {Object.entries(BlockchainEnum).map(([label, value]) => (\n          <MenuItem key={label} value={value}>\n            {label}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        type=\"text\"\n        label=\"Link\"\n        defaultValue={props.defaultValues?.link}\n        {...register('link')}\n        disabled={props.loading}\n      />\n      <FormLabel>\n        Hidden\n        <Checkbox\n          inputRef={hidden.ref}\n          defaultChecked={props.defaultValues?.hidden ?? undefined}\n          onChange={(_, checked) => setValue('hidden', checked)}\n          disabled={props.loading}\n        />\n      </FormLabel>\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        disabled={props.loading}\n        type=\"submit\"\n      >\n        Submit\n      </Button>\n    </form>\n  )\n}\n","import { getAPIClient } from '~/api'\nimport {\n  StakingContractCreateMutation,\n  StakingContractCreateMutationVariables,\n  StakingContractDeleteMutation,\n  StakingContractDeleteMutationVariables,\n  StakingContractListQuery,\n  StakingContractListQueryVariables,\n  StakingContractUpdateMutationVariables,\n  StakingContractUpdateMutation\n} from '~/graphql/_generated-types'\nimport {\n  STAKING_CONTRACT_LIST,\n  STAKING_CONTRACT_DELETE,\n  STAKING_CONTRACT_CREATE,\n  STAKING_CONTRACT_UPDATE\n} from './graphql'\n\nexport const stakingApi = {\n  contractList: (variables: StakingContractListQueryVariables) =>\n    getAPIClient()\n      .mutation<StakingContractListQuery, StakingContractListQueryVariables>(\n        STAKING_CONTRACT_LIST,\n        variables\n      )\n      .toPromise()\n      .then(({ data }) => data?.protocol?.contracts.list ?? []),\n\n  contractDelete: (id: string) =>\n    getAPIClient()\n      .mutation<\n        StakingContractDeleteMutation,\n        StakingContractDeleteMutationVariables\n      >(STAKING_CONTRACT_DELETE, { id })\n      .toPromise()\n      .then(({ data }) => data?.contractDelete),\n\n  contractCreate: (variables: StakingContractCreateMutationVariables) =>\n    getAPIClient()\n      .mutation<\n        StakingContractCreateMutation,\n        StakingContractCreateMutationVariables\n      >(STAKING_CONTRACT_CREATE, variables)\n      .toPromise()\n      .then(({ data }) => data?.contractCreate.protocolId),\n\n  contractUpdate: (variables: StakingContractUpdateMutationVariables) =>\n    getAPIClient()\n      .mutation<\n        StakingContractUpdateMutation,\n        StakingContractUpdateMutationVariables\n      >(STAKING_CONTRACT_UPDATE, variables)\n      .toPromise()\n      .then(({ data }) => data?.contractUpdate.protocolId)\n}\n","export * from './staking-create'\n","import { createDomain } from 'effector-logger'\nimport { history } from '~/common/history'\n\nimport { StakingContractCreateMutationVariables } from '~/graphql/_generated-types'\nimport { notifications } from '~/notifications'\nimport { paths } from '~/paths'\nimport { stakingApi } from '~/staking/common'\n\nconst stakingCreate = createDomain('stakingCreate')\n\nexport const stakingCreateFx = stakingCreate.createEffect({\n  name: 'stakingCreateFx',\n  handler: (input: StakingContractCreateMutationVariables) =>\n    stakingApi.contractCreate(input)\n})\n\nstakingCreateFx.failData.watch((error) => notifications.error(error.message))\n\nstakingCreateFx.doneData.watch((payload) => {\n  history.push(paths.protocols.detail(payload))\n})\n","import { useParams } from 'react-router-dom'\n\nimport { MainLayout } from '~/layouts'\nimport { StakingForm } from '~/staking/common'\nimport * as model from './staking-create.model'\n\nexport type StakingCreateProps = {\n  className?: string\n}\n\nexport const StakingCreate: React.VFC<StakingCreateProps> = () => {\n  const params = useParams<{ protocolId: string }>()\n\n  return (\n    <MainLayout>\n      <StakingForm\n        loading={false}\n        onSubmit={(formValues) =>\n          model.stakingCreateFx({\n            protocol: params.protocolId,\n            input: formValues\n          })\n        }\n      />\n    </MainLayout>\n  )\n}\n","export * from './staking-list'\n","import { createDomain, sample } from 'effector-logger'\nimport { createGate } from 'effector-react'\n\nimport { StakingContractFragmentFragment } from '~/graphql/_generated-types'\nimport { stakingApi } from '../common'\n\nexport const stakingListDomain = createDomain('stakingList')\n\nexport const fetchStakingListFx = stakingListDomain.createEffect({\n  name: 'fetchStakingList',\n  handler: async (id: string) => stakingApi.contractList({ filter: { id } })\n})\n\nconst ERROR = 'Not deleted'\n\nexport const deleteStakingFx = stakingListDomain.createEffect({\n  name: 'deleteStaking',\n  handler: async (id: string) => {\n    const isDeleted = await stakingApi.contractDelete(id)\n\n    if (isDeleted) {\n      return id\n    }\n\n    throw new Error(ERROR)\n  }\n})\n\nexport const $stakingList = stakingListDomain\n  .createStore<StakingContractFragmentFragment[]>([], {\n    name: 'protocols'\n  })\n  .on(fetchStakingListFx.doneData, (_, payload) => payload)\n  .on(deleteStakingFx.doneData, (state, payload) => {\n    return state.filter(({ id }) => id !== payload)\n  })\n\nexport const Gate = createGate<string>({\n  domain: stakingListDomain\n})\n\nsample({\n  clock: Gate.open,\n  target: fetchStakingListFx\n})\n","import { makeStyles, Paper } from '@material-ui/core'\nimport { useGate, useStore } from 'effector-react'\nimport Button from '@material-ui/core/Button'\nimport { Link as ReactRouterLink } from 'react-router-dom'\nimport { useMemo } from 'react'\n\nimport { Can, useAbility } from '~/users'\nimport * as model from './staking-list.model'\nimport { paths } from '~/paths'\nimport { useDialog } from '~/common/dialog'\nimport { ConfirmDialog } from '~/common/confirm-dialog'\n\nexport type StakingListProps = {\n  protocolId: string\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  },\n\n  card: {\n    padding: '10px 15px',\n    marginBottom: 5,\n    display: 'flex',\n    alignItems: 'center'\n  },\n\n  icons: {\n    display: 'flex',\n\n    '& > *:first-child': {\n      marginRight: -3\n    },\n\n    '& > *:last-child': {\n      marginLeft: -3\n    }\n  },\n\n  tvl: {\n    marginLeft: 'auto'\n  },\n\n  mr: {\n    marginRight: 10\n  }\n}))\n\nexport const StakingList: React.VFC<StakingListProps> = (props) => {\n  const classes = useStyles()\n\n  const ability = useAbility()\n\n  const stakingList = useStore(model.$stakingList)\n  const loading = useStore(model.fetchStakingListFx.pending)\n\n  const [openConfirmDialog] = useDialog(ConfirmDialog)\n\n  useGate(model.Gate, props.protocolId)\n\n  const staking = useMemo(\n    () => stakingList.filter((stakingItem) => ability.can('read', stakingItem)),\n    [stakingList, ability]\n  )\n\n  const handleOpenConfirmDialog = async (id: string) => {\n    try {\n      await openConfirmDialog()\n\n      await model.deleteStakingFx(id)\n    } catch (error) {\n      console.error(error.message)\n    }\n  }\n\n  return (\n    <div>\n      <Can I=\"create\" a=\"Contract\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          component={ReactRouterLink}\n          to={paths.staking.create(props.protocolId)}\n        >\n          New contract\n        </Button>\n      </Can>\n      <ul className={classes.root}>\n        {loading && <Paper>Loading...</Paper>}\n        {!loading && !staking.length && <Paper>no contracts found</Paper>}\n        {!loading &&\n          staking.map((stakingListItem) => (\n            <li key={stakingListItem.id}>\n              <Paper className={classes.card}>\n                <div className={`${classes.icons} ${classes.mr}`}>\n                  {stakingListItem.adapter}\n                </div>\n                <div>\n                  <div>{stakingListItem.name}</div>\n                  <div>{stakingListItem.blockchain}</div>\n                </div>\n                <div className={`${classes.tvl} ${classes.mr}`}>\n                  {stakingListItem.network}\n                </div>\n                <div className={classes.mr}>{stakingListItem.address}</div>\n                <div className={classes.mr}>{stakingListItem.description}</div>\n                <div className={classes.mr}>{stakingListItem.link}</div>\n                <div className={classes.mr}>\n                  {String(stakingListItem.hidden)}\n                </div>\n                <div className={classes.mr}>{stakingListItem.createdAt}</div>\n              </Paper>\n              <Can I=\"update\" a=\"Contract\">\n                <Button\n                  variant=\"contained\"\n                  component={ReactRouterLink}\n                  to={paths.staking.update(\n                    props.protocolId,\n                    stakingListItem.id\n                  )}\n                >\n                  Edit\n                </Button>\n              </Can>\n              <Can I=\"delete\" a=\"Contract\">\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => handleOpenConfirmDialog(stakingListItem.id)}\n                >\n                  Delete\n                </Button>\n              </Can>\n            </li>\n          ))}\n      </ul>\n    </div>\n  )\n}\n","export * from './staking-update'\n","import { createDomain } from 'effector-logger'\nimport { history } from '~/common/history'\n\nimport { StakingContractUpdateMutationVariables } from '~/graphql/_generated-types'\nimport { notifications } from '~/notifications'\nimport { paths } from '~/paths'\nimport { stakingApi } from '~/staking/common'\n\nconst stakingUpdate = createDomain('stakingUpdate')\n\nexport const stakingUpdateFx = stakingUpdate.createEffect({\n  name: 'stakingUpdateFx',\n  handler: (input: StakingContractUpdateMutationVariables) =>\n    stakingApi.contractUpdate(input)\n})\n\nstakingUpdateFx.failData.watch((error) => notifications.error(error.message))\n\nstakingUpdateFx.doneData.watch((payload) => {\n  history.push(paths.protocols.detail(payload))\n})\n","import { useParams } from 'react-router-dom'\nimport { useGate, useStoreMap } from 'effector-react'\n\nimport { MainLayout } from '~/layouts'\nimport { StakingForm } from '~/staking/common'\nimport * as model from './staking-update.model'\nimport * as stakingListModel from '~/staking/staking-list/staking-list.model'\n\nexport const StakingUpdate: React.VFC<unknown> = () => {\n  const params = useParams<{\n    protocolId: string\n    stakingId: string\n  }>()\n\n  const staking = useStoreMap({\n    store: stakingListModel.$stakingList,\n    keys: [params.stakingId],\n    fn: (contracts, [stakingId]) =>\n      contracts.find(({ id }) => id === stakingId) ?? null\n  })\n\n  useGate(stakingListModel.Gate, params.protocolId)\n\n  const defaultValues = staking\n    ? {\n        blockchain: staking.blockchain,\n        network: staking.network,\n        address: staking.address,\n        name: staking.name,\n        description: staking.description,\n        link: staking.link,\n        hidden: staking.hidden,\n        adapter: staking.adapter\n      }\n    : undefined\n\n  return (\n    <MainLayout>\n      <StakingForm\n        loading={false}\n        defaultValues={defaultValues}\n        onSubmit={(formValues) =>\n          model.stakingUpdateFx({ id: params.stakingId, input: formValues })\n        }\n      />\n    </MainLayout>\n  )\n}\n","export * from './me.graphql'\n","import { gql } from '@urql/core'\n\nexport const ME = gql`\n  query Me(\n    $filter: WalletListFilterInputType\n    $sort: [WalletListSortInputType!]\n    $pagination: WalletListPaginationInputType\n  ) {\n    me {\n      id\n      role\n      createdAt\n      wallets(filter: $filter, sort: $sort, pagination: $pagination) {\n        list {\n          id\n          blockchain\n          network\n          address\n          publicKey\n          createdAt\n        }\n        pagination {\n          count\n        }\n      }\n    }\n  }\n`\n","export * from './graphql'\nexport * from './user.api'\n","import { getAPIClient } from '~/api'\nimport { MeQuery, MeQueryVariables } from '~/graphql/_generated-types'\nimport { ME } from './graphql'\n\nexport const userApi = {\n  me: () =>\n    getAPIClient()\n      .query<MeQuery, MeQueryVariables>(ME, {})\n      .toPromise()\n      .then(({ data }) => data?.me)\n}\n","export { Can, useAbility } from './user.ability'\nexport * from './user.model'\nexport * from './user.provider'\n","import { AbilityBuilder, Ability, AbilityClass } from '@casl/ability'\nimport { createContext } from 'react'\nimport { createContextualCan, useAbility as useCaslAbility } from '@casl/react'\n\nimport {\n  ProtocolFragmentFragment,\n  StakingContractFragmentFragment\n} from '~/graphql/_generated-types'\n\nexport type Actions = 'create' | 'read' | 'update' | 'delete'\nexport type Subjects =\n  | ProtocolFragmentFragment\n  | StakingContractFragmentFragment\n  | 'Protocol'\n  | 'Contract'\n  | 'all'\n\nexport type AppAbilityType = Ability<[Actions, Subjects]>\nexport const AppAbility = Ability as AbilityClass<AppAbilityType>\n\nexport const defineRulesFor = (role?: string) => {\n  const { can, rules } = new AbilityBuilder(AppAbility)\n\n  if (role === 'admin') {\n    can(['create', 'delete', 'read', 'update'], 'all')\n  } else {\n    can(['read'], ['Contract', 'Protocol'], {\n      hidden: false\n    })\n  }\n\n  return rules\n}\n\nexport const buildAbilityFor = (role?: string): AppAbilityType => {\n  return new AppAbility(defineRulesFor(role), {\n    detectSubjectType: (object) => {\n      if ('network' in object) return 'Contract'\n\n      if ('hidden' in object) return 'Protocol'\n\n      return 'all'\n    }\n  })\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const AbilityContext = createContext<AppAbilityType>(undefined!)\n\nAbilityContext.displayName = 'AbilityContext'\n\nexport const Can = createContextualCan(AbilityContext.Consumer)\n\nexport const useAbility = () => useCaslAbility(AbilityContext)\n","import { createDomain, sample } from 'effector-logger'\nimport { createGate } from 'effector-react'\n\nimport { MeQuery } from '~/graphql/_generated-types'\nimport { signMessageFx } from '~/wallets/networks'\nimport { userApi } from './common'\n\nexport const userDomain = createDomain('user')\n\nexport const fetchUserFx = userDomain.createEffect({\n  name: 'fetchUser',\n  handler: async () => userApi.me()\n})\n\nexport const $user = userDomain\n  .createStore<MeQuery['me'] | null>(null, {\n    name: 'store'\n  })\n  .on(fetchUserFx.doneData, (_, payload) => payload)\n  .on(signMessageFx.doneData, (_, payload) => payload)\n\nexport const Gate = createGate()\n\nsample({\n  clock: Gate.open,\n  target: fetchUserFx\n})\n","import { useGate, useStore } from 'effector-react'\nimport { useMemo } from 'react'\n\nimport { AbilityContext, buildAbilityFor } from './user.ability'\nimport * as model from './user.model'\n\nexport type UserProviderProps = unknown\n\nexport const UserProvider: React.FC<UserProviderProps> = (props) => {\n  const user = useStore(model.$user)\n\n  const ability = useMemo(() => buildAbilityFor(user?.role), [user])\n\n  useGate(model.Gate)\n\n  return (\n    <AbilityContext.Provider value={ability}>\n      {props.children}\n    </AbilityContext.Provider>\n  )\n}\n","export * from './wallet-detail'\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport { useStore } from 'effector-react'\n\nimport { Dialog } from '~/common/dialog'\nimport { $wallet } from '~/wallets/networks/network.model'\nimport { cutAccount } from '~/common/cut-account'\n\nexport type WalletDetailProps = {\n  onChange: () => void\n}\n\nexport const WalletDetail: React.VFC<WalletDetailProps> = (props) => {\n  const wallet = useStore($wallet)\n\n  return (\n    <Dialog>\n      <div>{cutAccount(wallet.account)}</div>\n      <Button onClick={props.onChange}>Change Wallet</Button>\n    </Dialog>\n  )\n}\n","export * from './wallet-list'\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nimport { Dialog } from '~/common/dialog'\nimport { connectorsByName } from '~/wallets/common'\nimport { activateWalletFx } from '~/wallets/networks/network.model'\n\nexport type WalletListProps = {\n  onClick: () => void\n}\n\nconst useStyles = makeStyles({\n  icon: {\n    width: 40,\n    height: 40\n  }\n})\n\nexport const WalletList: React.VFC<WalletListProps> = (props) => {\n  const classes = useStyles()\n\n  const handleActivate = (connector: AbstractConnector) => {\n    activateWalletFx({ connector }).then(props.onClick)\n  }\n\n  return (\n    <Dialog>\n      <List>\n        {Object.entries(connectorsByName).map(([walletName, wallet]) => (\n          <ListItem\n            button\n            key={walletName}\n            onClick={() => handleActivate(wallet.connector)}\n          >\n            <ListItemIcon>\n              <wallet.logo className={classes.icon} />\n            </ListItemIcon>\n            <ListItemText primary={walletName} />\n          </ListItem>\n        ))}\n      </List>\n    </Dialog>\n  )\n}\n"],"mappings":"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A;AAAA;AAAA;AAAA;AAAA;AAwCA;AA1CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourceRoot":""}